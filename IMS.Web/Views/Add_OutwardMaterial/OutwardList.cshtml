@model PagedList.IPagedList<IMS.Models.IMSEntity>
@using PagedList.Mvc;
<link href="~/assets/css/custom.css" rel="stylesheet" />
@{
    string role = ViewBag.role;
    string empid = ViewBag.userid;
    string dept = ViewBag.department;
    string location = ViewBag.location;
    ViewBag.Title = "OutwardList";
    Layout = "~/Views/Shared/_Layout_IMS.cshtml";
}
@*<link href="~/Content/bootstrap.min.css" rel="stylesheet" type="text/css" />*@
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link href="~/assets/css/custom.css" rel="stylesheet" />

@{
    string count = string.Empty;
}

<div class="inward-list">
    <h5 class="content-title mb-3">Outward Items</h5>

    <div class="card card-height">
        <!-- Add Tabs for Returnable and Non-Returnable -->
        <ul class="nav nav-tabs custom-tabs py-3 px-4 tab-listing" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="tab-list active" id="returnable-tab" data-bs-toggle="tab" href="#returnable" role="tab" aria-controls="returnable" aria-selected="true">Returnable</a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="tab-list" id="nonreturnable-tab" data-bs-toggle="tab" href="#nonreturnable" role="tab" aria-controls="nonreturnable" aria-selected="false">Non-Returnable</a>
            </li>
        </ul>

        <!-- Tab Content for Returnable and Non-Returnable -->
        <div class="tab-content custom-tab-content" id="myTabContent">
            <!-- Returnable Section -->
            <div class="tab-pane fade show active" id="returnable" role="tabpanel" aria-labelledby="returnable-tab">

                @{
                    count = ViewBag.display;
                }
                <div class="d-flex p-3 px-4 align-items-center justify-content-between inward-search-div ol-md-12">
                    <div class="search-div d-flex align-items-center">
                        <h5 class="search-font pe-2 mb-0">Search By:</h5>

                        @using (Html.BeginForm("OutwardList", "Add_OutwardMaterial", FormMethod.Post))
                        {
                            @Html.DropDownList("Name", new List<SelectListItem>
                            {
                               new SelectListItem{Text = "Outward id", Value="Outward_id"},
                               new SelectListItem{Text= "Department" , Value="Outward_department"},
                               new SelectListItem{Text= "Location" , Value="Outward_Location"},
                               new SelectListItem{Text= "ExpenseNature" , Value="Inward_nature"},
                               new SelectListItem{Text= "Inward_datetime" , Value="Inward_datetime"},
                               new SelectListItem{Text= "Inward_raised_by" , Value="Inward_raised_by"},


                            }, "Select", new { @id = "select", @class = "form-control input-col inward-list-dropdown", @onchange = "Valuefunction()" })

                            @Html.TextBox("SearchValue", null, new { @style = "display:none;", @class = "search1", @id = "search_by_text", @placeholder = "Search" })
                            {
                                // Assuming you have fetched the department data from the database and stored it in a variable named departmentsList
                                List<SelectListItem> departmentItems = new List<SelectListItem>();
                                var context = new IMS.Entities.ServiceVMSEntities();
                                var departmentsList = (from s in context.ServiceUserDepartments
                                                       select new
                                                       {
                                                           userDepartmentName = s.userDepartmentName,

                                                       });


                                foreach (var department in departmentsList)
                                {
                                    departmentItems.Add(new SelectListItem { Text = department.userDepartmentName, Value = department.userDepartmentName });
                                }
                                @Html.DropDownList("SearchValue1", departmentItems, "Select Department", new { @id = "select_DN", @style = "display:none; ", @class = "form-control input-col inward-list-dropdown", @onchange = "Valuefunction()" })
                            }
                            @Html.DropDownList("SearchValue_ExpenseN", new List<SelectListItem>
                            {
                              new SelectListItem{ Text = "opex", Value ="opex"},
                              new SelectListItem{Text= "capex" , Value ="capex"},
                              new SelectListItem{Text= "rental" , Value ="rental"},
                            }
                          , "Select", new { @id = "ExpenseNature", @name = "SearchValue2", @class = "search1 form-control input-col inward-list-dropdown", @style = "display:none;" })

                            <input class="search2" type="date" value="Search" style="display:none;" id="search_by_date" name="searchdate" />
                            <input type="submit" value="Search" id="submit">

                            if (ViewBag.countForsearch == 1)
                            {

                                <a class="clear-font" href="@Url.Action("OutwardList", "Add_OutwardMaterial")">
                                    Clear Search
                                </a>
                            }
                            @* if (role == "Procurement Operator" || role == "Third Level Approver")
                    {
                        @Html.ActionLink("Actionable Items", "RequisitionView", "Add_Requisition", new { @name = "Actionalble" }, new { @class = "btn btn-primary", @style = "margin-bottom:3px;" })

                    }*@
                        }
                    </div>

                    <div class="rightactionalble-btns d-flex">
                        @if (Session["role"].ToString() == "Security Guard")
                        {
                            var isActionable = Request.QueryString["name"] == "actionable";
                            <a class="action-btn mr-18" href="@Url.Action("OutwardList", "Add_OutwardMaterial", new { name = "actionable" })" style="margin-bottom:3px;">
                                Actionable Items
                            </a>
                            if (isActionable)
                            {
                                <a class="action-btn" href="@Url.Action("OutwardList", "Add_OutwardMaterial")" style="margin-bottom:3px;">
                                    Clear Search
                                </a>
                            }
                        }
                    </div>
                </div>
            </div>

                <div class="card-body pt-0">
                    <div class="form addInward inward-list-table">
                        <div class="table-wrapper">
                            <table id="paginatedTable">
                                <thead>
                                    <tr>
                                        <th scope="col">
                                            @Html.ActionLink("Outward_ID", "OutwardList", new { sortOrder = ViewBag.Inward_datetime, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("Gatepass_Number", "OutwardList", new { sortOrder = ViewBag.VendorName, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("Department", "OutwardList", new { sortOrder = ViewBag.Inward_department, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("Location", "OutwardList", new { sortOrder = ViewBag.Inward_Location, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("OutwardDatetime", "OutwardList", new { sortOrder = ViewBag.Inward_nature, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("ReceiverName", "OutwardList", new { sortOrder = ViewBag.servicestatuspara, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("Outward Status", "OutwardList", new { sortOrder = ViewBag.servicestatuspara, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                        </th>
                                        <th scope="col">
                                        </th>

                                    </tr>
                                    @if (Model.Count() == 0)
                                    {
                                        <tr>
                                            <td> Records not found </td>
                                        </tr>
                                    }
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Where(x => x.GatepassType == "Returnable").ToList())
                                    {
                                    <tr>
                                        <td data-label="inward-date">
                                            @Html.DisplayFor(modelItem => item.OW_MaterialID)
                                        </td>
                                        <td data-label="inward-date">
                                            @Html.DisplayFor(modelItem => item.Gatepass_Number)
                                        </td>
                                        <td data-label="department">
                                            @Html.DisplayFor(modelItem => item.userDepartmentName)
                                        </td>
                                        <td data-label="location">
                                            @Html.DisplayFor(modelItem => item.Location)
                                        </td>

                                        <td data-label="expense-nature">
                                            @Html.DisplayFor(modelItem => item.OutwardDatetime)
                                        </td>
                                        <td data-label="expense-nature">
                                            @Html.DisplayFor(modelItem => item.ReceiverName)
                                        </td>
                                        <td data-label="outwardstatus" class="@Html.DisplayFor(modelItem => item.Outward_Status)">
                                            <span>  @Html.DisplayFor(modelItem => item.Outward_Status)</span>
                                        </td>


                                        <td data-label="actions" class="d-flex align-items-center justify-content-between">
                                            @{
                                                byte[] encoded = System.Text.Encoding.UTF8.GetBytes(item.OW_MaterialID);
                                                var OWCode = Convert.ToBase64String(encoded);
                                            }

                                            <a class="dropdown-item1" href="@Url.Action("OutwardDetails", "Add_OutwardMaterial", new { id = item.OW_MaterialID },null)"> <img class="px-2 action-item" src="~/assets/images/icons/view.svg" alt="View" /></a>


                                        </td>

                                        @{
                                            string outwardstatus = string.Empty;
                                            string roleinims = string.Empty;
                                            string Location = string.Empty;

                                            int Outwardcount = 1;
                                            var outward_id = string.Empty;
                                            var context2 = new IMS.Entities.ServiceVMSEntities();

                                            
                                            var q = (from t in context2.OutwardMaterials
                                                     where t.OW_MaterialID == item.OW_MaterialID
                                                     select new { t.Outward_Status, t.OW_MaterialID });

                                            foreach (var t in q)
                                            {
                                                outwardstatus = t.Outward_Status;
                                                outward_id = t.OW_MaterialID;


                                                if (role == "Security Guard" && outwardstatus == "Material Out" && Outwardcount == 1)
                                                {
                                                    Outwardcount++;
                                                    <td class="col-md-1">
                                                        <span>
                                                            <i class="fa fa-exclamation-circle icon_Inward" style="color:red" title="Pending Approver for Inward"></i>
                                                        </span>
                                                    </td>
                                                    break;
                                                }


                                            }
                                        }

                                    </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <br />

                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                        <div class="pagination justify-content-end">
                            @Html.PagedListPager(Model, page => Url.Action("OutwardList",
                                new { Page_no = page, sortOrder = ViewBag.CurrentSort, Name = ViewBag.Name, SearchValue = ViewBag.SearchValue, SearchValue1 = ViewBag.SearchValue1, SearchValue2 = ViewBag.SearchValue2, SearchValue3 = ViewBag.SearchValue3, reason = ViewBag.reason, searchdate = ViewBag.searchdate }))
                        </div>
                    </div>

                </div>
            </div>

        </div>

        <!-- Non-Returnable Section -->
        <div class="tab-pane fade" id="nonreturnable" role="tabpanel" aria-labelledby="nonreturnable-tab">
            <!-- Non-Returnable Content -->
            <div class="">
                @{
                    count = ViewBag.display;
                }
                <div class="d-flex p-3 px-4 align-items-center justify-content-between inward-search-div ol-md-12">
                    <div class="search-div d-flex align-items-center">
                        <h5 class="search-font pe-2 mb-0">Search By:</h5>

                        @using (Html.BeginForm("OutwardList", "Add_OutwardMaterial", FormMethod.Post))
                        {
                            @Html.DropDownList("Name", new List<SelectListItem>
                            {
                               new SelectListItem{Text = "Outward id", Value="Outward_id"},
                               new SelectListItem{Text= "Department" , Value="Outward_department"},
                               new SelectListItem{Text= "Location" , Value="Outward_Location"},
                               new SelectListItem{Text= "ExpenseNature" , Value="Inward_nature"},
                               new SelectListItem{Text= "Inward_datetime" , Value="Inward_datetime"},
                               new SelectListItem{Text= "Inward_raised_by" , Value="Inward_raised_by"},


                            }, "Select", new { @id = "select", @class = "form-control input-col inward-list-dropdown", @onchange = "Valuefunction()" })

                            @Html.TextBox("SearchValue", null, new { @style = "display:none;", @class = "search1", @id = "search_by_text", @placeholder = "Search" })
                            {
                                // Assuming you have fetched the department data from the database and stored it in a variable named departmentsList
                                List<SelectListItem> departmentItems = new List<SelectListItem>();
                                var context = new IMS.Entities.ServiceVMSEntities();
                                var departmentsList = (from s in context.ServiceUserDepartments
                                                       select new
                                                       {
                                                           userDepartmentName = s.userDepartmentName,

                                                       });


                                foreach (var department in departmentsList)
                                {
                                    departmentItems.Add(new SelectListItem { Text = department.userDepartmentName, Value = department.userDepartmentName });
                                }
                                @Html.DropDownList("SearchValue1", departmentItems, "Select Department", new { @id = "select_DN", @style = "display:none; ", @class = "form-control input-col inward-list-dropdown", @onchange = "Valuefunction()" })
                            }
                            @Html.DropDownList("SearchValue_ExpenseN", new List<SelectListItem>
                            {
                              new SelectListItem{ Text = "opex", Value ="opex"},
                              new SelectListItem{Text= "capex" , Value ="capex"},
                              new SelectListItem{Text= "rental" , Value ="rental"},
                            }
                          , "Select", new { @id = "ExpenseNature", @name = "SearchValue2", @class = "search1 form-control input-col inward-list-dropdown", @style = "display:none;" })

                            <input class="search2" type="date" value="Search" style="display:none;" id="search_by_date" name="searchdate" />
                            <input type="submit" value="Search" id="submit">

                            if (ViewBag.countForsearch == 1)
                            {

                                <a class="clear-font" href="@Url.Action("OutwardList", "Add_OutwardMaterial")">
                                    Clear Search
                                </a>
                            }
                            @* if (role == "Procurement Operator" || role == "Third Level Approver")
                                {
                                    @Html.ActionLink("Actionable Items", "RequisitionView", "Add_Requisition", new { @name = "Actionalble" }, new { @class = "btn btn-primary", @style = "margin-bottom:3px;" })

                                }*@
                        }
                    </div>

                    @*<div class="rightactionalble-btns d-flex">
                            <button class="action-btn">Actionable Items</button>
                        </div>*@
                </div>

                <div class="card-body pt-0">
                    <div class="form addInward inward-list-table">
                        <div class="table-wrapper">
                            <table id="paginatedTable">
                                <thead>
                                    <tr>
                                        <th scope="col">
                                            @Html.ActionLink("Outward_ID", "OutwardList", new { sortOrder = ViewBag.Inward_datetime, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("Gatepass_Number", "OutwardList", new { sortOrder = ViewBag.VendorName, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("Department", "OutwardList", new { sortOrder = ViewBag.Inward_department, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("Location", "OutwardList", new { sortOrder = ViewBag.Inward_Location, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("OutwardDatetime", "OutwardList", new { sortOrder = ViewBag.Inward_nature, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("ReceiverName", "OutwardList", new { sortOrder = ViewBag.servicestatuspara, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>
                                        <th scope="col">
                                            @Html.ActionLink("Outward Status", "OutwardList", new { sortOrder = ViewBag.servicestatuspara, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                        </th>

                                        <th scope="col">
                                        </th>
                                        <th scope="col">
                                        </th>

                                    </tr>
                                    @if (Model.Count() == 0)
                                    {
                                        <tr>
                                            <td> Records not found </td>
                                        </tr>
                                    }
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Where(X => X.GatepassType == "NonReturnable").ToList())
                                    {
                                        <tr>
                                            <td data-label="inward-date">
                                                @Html.DisplayFor(modelItem => item.OW_MaterialID)
                                            </td>
                                            <td data-label="inward-date">
                                                @Html.DisplayFor(modelItem => item.Gatepass_Number)
                                            </td>
                                            <td data-label="department">
                                                @Html.DisplayFor(modelItem => item.userDepartmentName)
                                            </td>
                                            <td data-label="location">
                                                @Html.DisplayFor(modelItem => item.Location)
                                            </td>

                                            <td data-label="expense-nature">
                                                @Html.DisplayFor(modelItem => item.OutwardDatetime)
                                            </td>
                                            <td data-label="expense-nature">
                                                @Html.DisplayFor(modelItem => item.ReceiverName)
                                            </td>

                                            <td data-label="outwardstatus">
                                                @Html.DisplayFor(modelItem => item.Outward_Status)
                                            </td>


                                            <td data-label="actions" class="d-flex align-items-center justify-content-between">
                                                @{
                                                    byte[] encoded = System.Text.Encoding.UTF8.GetBytes(item.OW_MaterialID);
                                                    var OWCode = Convert.ToBase64String(encoded);
                                                }

                                                <a class="dropdown-item1" href="@Url.Action("OutwardDetails", "Add_OutwardMaterial", new { id = item.OW_MaterialID },null)"> <img class="px-2 action-item" src="~/assets/images/icons/view.svg" alt="View" /></a>


                                            </td>



                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <br />

                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                        <div class="pagination justify-content-end">
                            @Html.PagedListPager(Model, page => Url.Action("OutwardList",
                                new { Page_no = page, sortOrder = ViewBag.CurrentSort, Name = ViewBag.Name, SearchValue = ViewBag.SearchValue, SearchValue1 = ViewBag.SearchValue1, SearchValue2 = ViewBag.SearchValue2, SearchValue3 = ViewBag.SearchValue3, reason = ViewBag.reason, searchdate = ViewBag.searchdate }))
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>


<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
@section Scripts
		{
    <script type="text/javascript">

        var prevElem = document.getElementsByClassName("PagedList-skipToPrevious")[0];
        var nextElem = document.getElementsByClassName("PagedList-skipToNext")[0];


        if (prevElem) {
            prevElem.firstChild.textContent = "Prev";
        }
        if (nextElem) {
            nextElem.firstChild.textContent = "Next";
        }
			function Valuefunction() {
				debugger
				var search_decide = document.getElementById("select");
				var search_option = search_decide.options[search_decide.selectedIndex].value;
				if (search_option == "Inward_id") {
					debugger
					document.getElementById("search_by_text").style.display = "inline";
					document.getElementById("ExpenseNature").style.display = "none";
					document.getElementById("select_DN").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				}
				else if (search_option == "Inward_department") {
					document.getElementById("select_DN").style.display = "inline";
					document.getElementById("search_by_text").style.display = "none";
					document.getElementById("ExpenseNature").style.display = "none";
					document.getElementById("MaterialCat").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				   @* document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";*@


				}
				else if (search_option == "Inward_Location") {

					document.getElementById("search_by_text").style.display = "inline";
					document.getElementById("ExpenseNature").style.display = "none";
				   @* document.getElementById("MaterialCat").style.display = "none";*@
					document.getElementById("select_DN").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				  @*  document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";*@


				}

				else if (search_option == "Inward_nature") {

					document.getElementById("ExpenseNature").style.display = "inline";
					document.getElementById("search_by_text").style.display = "none";

					document.getElementById("select_DN").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				   @* document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";*@

				}
				else if (search_option == "Inward_datetime") {

					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("ExpenseNature").style.display = "none";
					document.getElementById("search_by_text").style.display = "none";
					document.getElementById("select_DN").style.display = "none";
				   @* document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";
	*@
				}
				else if (search_option == "Inward_raised_by") {
					document.getElementById("search_by_text").style.display = "inline";
					document.getElementById("ExpenseNature").style.display = "none";
					document.getElementById("select_DN").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				  @*  document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";*@

				}

			}
    </script>
}